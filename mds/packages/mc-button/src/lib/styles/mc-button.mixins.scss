@mixin apply-button-fit($fit) {
  button,
  a,
  .link-button {
    height: var(--mds_core_button_#{$fit}_height);
    padding: var(--mds_core_button_#{$fit}_padding-top) var(--mds_core_button_#{$fit}_padding-right)
      var(--mds_core_button_#{$fit}_padding-bottom) var(--mds_core_button_#{$fit}_padding-left);

    .mc-text-and-icon {
      gap: var(--mds_core_button_#{$fit}_gap);
    }

    .mc-text-and-icon.hidden-label {
      gap: 0;
    }

    .leading-icon,
    .trailing-icon {
      height: var(--mds_core_button_#{$fit}_icon_height);
      width: var(--mds_core_button_#{$fit}_icon_width);
    }

    @if $fit == 'large' {
      @include mds-apply-font('text', 'medium', 'normal');
    } @else {
      @include mds-apply-font('text', '#{$fit}', 'normal');
    }
  }

  &.icon-button {
    button,
    a,
    .link-button {
      padding: var(--mds_core_button_#{$fit}_icon-button_padding-top)
        var(--mds_core_button_#{$fit}_icon-button_padding-right)
        var(--mds_core_button_#{$fit}_icon-button_padding-bottom)
        var(--mds_core_button_#{$fit}_icon-button_padding-left);
    }

    .items-left {
      padding-left: var(--mds_core_button_#{$fit}_gap);
    }

    .items-right {
      padding-right: var(--mds_core_button_#{$fit}_gap);
    }
  }

  //compact
  &.padding-compact {
    button,
    a,
    .link-button {
      min-width: unset;
      padding: var(--mds_core_button_#{$fit}_compact_padding-top) var(--mds_core_button_#{$fit}_compact_padding-right)
        var(--mds_core_button_#{$fit}_compact_padding-bottom) var(--mds_core_button_#{$fit}_compact_padding-left);
      width: unset;

      .mc-text-and-icon {
        gap: var(--mds_core_button_#{$fit}_compact_gap);
      }
    }
  }

  &.padding-compact.icon-button {
    button,
    a,
    .link-button {
      padding: var(--mds_core_button_#{$fit}_compact_icon-button_padding-top)
        var(--mds_core_button_#{$fit}_compact_icon-button_padding-right)
        var(--mds_core_button_#{$fit}_compact_icon-button_padding-bottom)
        var(--mds_core_button_#{$fit}_compact_icon-button_padding-left);
    }
  }

  &.padding-none {
    button,
    a,
    .link-button {
      min-width: unset;
      padding: 0;
      width: unset;
    }
  }

  &.padding-none.icon-button {
    button,
    a,
    .link-button {
      width: auto;
      padding: 0;
    }
  }

  &.full-width,
  &.full-width.icon-button {
    width: 100%;

    button,
    a,
    .link-button {
      width: 100%;
    }
  }

  ::slotted(a) {
    padding: var(--mds_core_button_#{$fit}_padding-top) var(--mds_core_button_#{$fit}_padding-right)
      var(--mds_core_button_#{$fit}_padding-bottom) var(--mds_core_button_#{$fit}_padding-left);
    margin: calc(var(--mds_core_button_#{$fit}_padding-top) * -1)
      calc(var(--mds_core_button_#{$fit}_padding-right) * -1) calc(var(--mds_core_button_#{$fit}_padding-bottom) * -1)
      calc(var(--mds_core_button_#{$fit}_padding-left) * -1);
  }
}

@mixin apply-slot-icon-fit($fit, $type) {
  ::slotted(a) {
    @if ($type == 'icon') {
      padding-left: calc(
        var(--mds_core_button_#{$fit}_padding-left) +
        var(--mds_core_button_#{$fit}_icon_width) +
        var(--mds_core_button_#{$fit}_gap)
      );
      margin-left: calc(
        (
          var(--mds_core_button_#{$fit}_padding-left) +
          var(--mds_core_button_#{$fit}_icon_width) +
          var(--mds_core_button_#{$fit}_gap)
        ) *
        -1
      );
    } @else {
      padding-right: calc(
        var(--mds_core_button_#{$fit}_padding-right) +
        var(--mds_core_button_#{$fit}_icon_width) +
        var(--mds_core_button_#{$fit}_gap)
      );
      margin-right: calc(
        (
          var(--mds_core_button_#{$fit}_padding-right) +
          var(--mds_core_button_#{$fit}_icon_width) +
          var(--mds_core_button_#{$fit}_gap)
        ) *
        -1
      );
    }
  }
}

@mixin apply-button-variant-appearance($appearance, $variant) {
  // state: initial
  button,
  a,
  .link-button {
    background-color: var(--mds_core_button_#{$appearance}_#{$variant}_background-color);
    border-color: var(--mds_core_button_#{$appearance}_#{$variant}_border-color);
    color: var(--mds_core_button_#{$appearance}_#{$variant}_text-color);

    mc-icon::part(icon) {
      fill: var(--mds_core_button_#{$appearance}_#{$variant}_text-color);
    }

    // state: hover
    &.hover,
    &:hover {
      background-color: var(--mds_core_button_#{$appearance}_#{$variant}_hover_background-color);
      border-color: var(--mds_core_button_#{$appearance}_#{$variant}_hover_border-color);
      color: var(--mds_core_button_#{$appearance}_#{$variant}_hover_text-color);

      mc-icon::part(icon) {
        fill: var(--mds_core_button_#{$appearance}_#{$variant}_hover_text-color);
      }
    }
  }

  // state: active
  &.active button,
  &.active a,
  &.active .link-button,
  button:active,
  button.active,
  a:active,
  a.active,
  .link-button:active,
  .link-button.active {
    background-color: var(--mds_core_button_#{$appearance}_#{$variant}_active_background-color);
    border-color: var(--mds_core_button_#{$appearance}_#{$variant}_active_border-color);
    color: var(--mds_core_button_#{$appearance}_#{$variant}_active_text-color);

    mc-icon::part(icon) {
      fill: var(--mds_core_button_#{$appearance}_#{$variant}_active_text-color);
    }
  }

  ::slotted(a) {
    color: var(--mds_core_button_#{$appearance}_#{$variant}_text-color) !important;
  }

  ::slotted(a:active) {
    color: var(--mds_core_button_#{$appearance}_#{$variant}_active_text-color) !important;
  }

  ::slotted(a:hover),
  ::slotted(a:visited) {
    color: var(--mds_core_button_#{$appearance}_#{$variant}_hover_text-color) !important;
  }
  // loading indicator
  @if (($appearance == 'primary' and $variant == 'filled') or ($appearance == 'error' and $variant == 'filled')) {
    mc-loading-indicator::part(track) {
      stroke: var(--mds_brand_appearance_#{$appearance}_default_on-background-color);
      opacity: 0.5;
    }

    mc-loading-indicator::part(progress) {
      stroke: var(--mds_brand_appearance_#{$appearance}_default_on-background-color);
    }
  } @else if $appearance == 'inverse' {
    mc-loading-indicator::part(track) {
      stroke: var(--mds_core_button_#{$appearance}_#{$variant}_text-color);
      opacity: 0.5;
    }

    mc-loading-indicator::part(progress) {
      stroke: var(--mds_core_button_#{$appearance}_#{$variant}_text-color);
    }
  } @else {
    mc-loading-indicator::part(track) {
      stroke: var(--mds_brand_appearance_neutral_default_text-color);
      opacity: 0.5;
    }

    mc-loading-indicator::part(progress) {
      stroke: var(--mds_brand_appearance_neutral_default_text-color);
    }
  }
}
