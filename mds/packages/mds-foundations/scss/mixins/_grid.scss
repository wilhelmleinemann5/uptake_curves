@import './_media';

@mixin mds-grid-base {
  display: grid;
}

// MDS grid system - setting up columns

@mixin mds-col($breakpoint: null) {
  @if $breakpoint == null {

    @for $i from 1 through 12 {
      .mds-grid-col-#{$i} {
        /* 
        @name: mds-grid-col-#{$i}
        @category: Grid
        @usage: 
        Use mds-grid-col-#{$i} class to position the cell in the #{$i} column of the grid.
        The class is independent of the breakpoint, so when applied, the cell will persist to be in column #{$i} in all screen sizes.
        @example:
        <div class="mds-container">
          <div class="mds-grid">
            <div class="mds-grid-col-1">Cell in column 1 in all breakpoints</div>
            <div class="mds-grid-col-2">Cell in column 2 in all breakpoints</div>
            ...
          </div>
        </div> */
        grid-column-start: #{$i};
      }
    }
  } @else {

    @for $i from 1 through 12 {
      .mds-grid-#{$breakpoint}-col-#{$i} {
        /* 
        @name: mds-grid-#{$breakpoint}-col-#{$i}
        @category: Grid
        @usage: 
        Use mds-grid-#{$breakpoint}-col-#{$i} class to position the cell in the #{$i} column of the grid in #{$breakpoint} breakpoint.
        The class is dependent of the breakpoint, so when applied, the cell will only be in column #{$i} for #{$breakpoint} breakpoint.
        @example:
        <div class="mds-container">
          <div class="mds-grid">
            <div class="mds-grid-#{$breakpoint}-col-1">Cell in column 1 for #{$breakpoint} breakpoint</div>
            <div class="mds-grid-#{$breakpoint}-col-2">Cell in column 2 for #{$breakpoint} breakpoint</div>
            ...
          </div>  
        </div> */
        grid-column-start: #{$i};
      }
    }
  }
}

@mixin mds-col-reverse($breakpoint: null) {
  @if $breakpoint == null {

    @for $i from 1 through 13 {
      .mds-grid-col-#{$i}-reverse {
        /* 
        @name: mds-grid-col-#{$i}-reverse
        @category: Grid
        @usage: 
        Use mds-grid-col-#{$i}-reverse class to position the cell in the reverse order in the #{$i} column (from the end) of the grid.
        The class is independent of the breakpoint, so when applied, the cell will persist to be in column #{$i} from the end in all screen sizes.
        @example:
        <div class="mds-container">
          <div class="mds-grid">
            <div class="mds-grid-col-2-reverse">Cell in column 2 from the end in all breakpoints</div>
            <div class="mds-grid-col-1-reverse">Cell in column 1 from the end in all breakpoints</div>
            ...
          </div>
        </div> */
        grid-column-start: -#{$i + 1};
      }
    }
  } @else {

    @for $i from 1 through 12 {
      .mds-grid-#{$breakpoint}-col-#{$i}-reverse {
        /* 
        @name: mds-grid-#{$breakpoint}-col-#{$i}-reverse
        @category: Grid
        @usage: 
        Use mds-grid-#{$breakpoint}-col-#{$i}-reverse class to position the cell in the reverse order in the #{$i} column (from the end) in #{$breakpoint} breakpoint.
        The class is dependent of the breakpoint, so when applied, the cell will be only in column #{$i} from the end for #{$breakpoint} breakpoint.
        @example:
        <div class="mds-container">
          <div class="mds-grid">
            <div class="mds-grid-#{$breakpoint}-col-2-reverse">Cell in column 2 from the end in all breakpoints</div>
            <div class="mds-grid-#{$breakpoint}-col-1-reverse">Cell in column 1 from the end in all breakpoints</div>
            ...
          </div>
        </div> */
        grid-column-start: -#{$i + 1};
      }
    }
  }
}

@mixin mds-col-span($breakpoint: null) {
  @if $breakpoint == null {
    .mds-grid-col-span-to-end {
      grid-column-end: -1;
    }

    .mds-grid-col-span-to-start {
      grid-column-end: 1;
    }

    @for $i from 1 through 12 {
      .mds-grid-col-span-#{$i} {
        /* 
        @name: mds-grid-col-span-#{$i}
        @category: Grid
        @usage: 
        Use mds-grid-col-span-#{$i} class to span multiple cells in your grid.
        The class is independent of the breakpoint, so when applied, the cells spanning will persist in all screen sizes.
        @example:
        <div class="mds-container">
          <div class="mds-grid">
            <div class="mds-grid-col-1 mds-grid-col-span-2">Cell in column 1 that spans over 2 columns in all breakpoints</div>
            <div class="mds-grid-col-3 mds-grid-col-span-3">Cell in column 3 that spans over 3 columns in all breakpoints</div>
            ...
          </div>
        </div> */
        grid-column-end: span #{$i};
      }
    }
  } @else {

    @for $i from 1 through 12 {
      .mds-grid-#{$breakpoint}-col-span-#{$i} {
        /* 
        @name: mds-grid-#{$breakpoint}-col-span-#{$i}
        @category: Grid
        @usage: 
        Use mds-grid-#{$breakpoint}-col-span-#{$i} class to span multiple cells in your grid for #{$breakpoint} breakpoint.
        The class is dependent of the breakpoint, so when applied, the cells spanning will apply only for #{$breakpoint} breakpoint.
        Use it in combination with mds-grid-#{$breakpoint}-col-#{$i} class to position the cell in the #{$i} column of the grid in #{$breakpoint} breakpoint.
        @example:
        <div class="mds-container">
          <div class="mds-grid">
            <div class="mds-grid-#{$breakpoint}-col-1 mds-grid-#{$breakpoint}-col-span-2">Cell in column 1 that spans over 2 columns in #{$breakpoint} breakpoints</div>
            ...
          </div>
        </div> */
        grid-column-end: span #{$i};
      }
    }
  }
}

// MDS grid system - setting up rows

@mixin mds-row($breakpoint: null) {
  @if $breakpoint == null {

    @for $i from 1 through 24 {
      .mds-grid-row-#{$i} {
        grid-row-start: #{$i};
      }
    }
  } @else {

    @for $i from 1 through 24 {
      .mds-grid-#{$breakpoint}-row-#{$i} {
        grid-row-start: #{$i};
      }
    }
  }
}

@mixin mds-row-span($breakpoint: null) {
  @if $breakpoint == null {
    .mds-grid-row-span-to-end {
      grid-row-end: -1;
    }

    .mds-grid-row-span-to-start {
      grid-row-end: 1;
    }

    @for $i from 1 through 24 {
      .mds-grid-row-span-#{$i} {
        grid-row-end: span #{$i};
      }
    }
  } @else {

    @for $i from 1 through 24 {
      .mds-grid-#{$breakpoint}-row-span-#{$i} {
        grid-row-end: span #{$i};
      }
    }
  }
}

// Custom number of columns and rows

@mixin mds-cols($breakpoint: null) {
  @if $breakpoint == null {

    @for $i from 1 through 12 {
      &.mds-grid-cols-#{$i} {
        grid-template-columns: repeat($i, minmax(0, 1fr));
      }
    }
  } @else {

    @for $i from 1 through 12 {
      &.mds-grid-#{$breakpoint}-cols-#{$i} {
        grid-template-columns: repeat($i, minmax(0, 1fr));
      }
    }
  }
}

@mixin mds-rows($breakpoint: null) {
  @if $breakpoint == null {

    @for $i from 1 through 24 {
      &.mds-grid-rows-#{$i} {
        grid-template-rows: repeat($i, auto);
      }
    }
  } @else {

    @for $i from 1 through 24 {
      &.mds-grid-#{$breakpoint}-rows-#{$i} {
        grid-template-rows: repeat($i, auto);
      }
    }
  }
}

// Grid columns for different breakpoints

@mixin mds-grid-xs {
  gap: var(--mds_foundations_grid_xs_column-gap) var(--mds_foundations_grid_xs_row-gap);
  grid-template-columns: repeat(var(--mds_foundations_grid_xs_columns), minmax(0, 1fr));
}

@mixin mds-grid-sm {
  gap: var(--mds_foundations_grid_sm_column-gap) var(--mds_foundations_grid_sm_row-gap);
  grid-template-columns: repeat(var(--mds_foundations_grid_sm_columns), minmax(0, 1fr));
}

@mixin mds-grid-md {
  gap: var(--mds_foundations_grid_md_column-gap) var(--mds_foundations_grid_md_row-gap);
  grid-template-columns: repeat(var(--mds_foundations_grid_md_columns), minmax(0, 1fr));
}
