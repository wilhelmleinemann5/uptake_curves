@mixin apply-mc-step-indicator-item-status($status) {
  .marker {
    background-color: var(--mds_core_step-indicator-item_#{$status}_marker_background-color);
    border-color: var(--mds_core_step-indicator-item_#{$status}_marker_border-color);

    svg,
    mc-icon::part(icon) {
      fill: var(--mds_core_step-indicator-item_#{$status}_marker_fill);
    }
  }

  @if $status == current or $status == completed or $status == pending {
    //important hard to avoid here without a lot of specificity hacks
    .label {
      font-weight: var(--mds_core_step-indicator-item_#{$status}_label_font-weight) !important;
    }

    &::after {
      background-color: var(--mds_core_step-indicator-item_#{$status}_line_background-color);
    }
  }
}

@mixin apply-mc-step-indicator-item-appearance($appearance) {
  svg path {
    stroke: var(--mds_core_step-indicator-item_#{$appearance}_marker_fill);
    stroke-width: var(--mds_core_step-indicator-item_#{$appearance}_marker_stroke-width);
  }

  @include apply-mc-step-indicator-item-status($appearance);
}

@mixin apply-mc-step-indicator-item($fit, $orientation) {
  .marker {
    width: var(--mds_core_step-indicator-item_#{$fit}_marker_width);
    height: var(--mds_core_step-indicator-item_#{$fit}_marker_height);
  }

  .label {
    @if $fit == 'small' {
      @include mds-apply-font('text', 'x-small', 'normal');
    }
    @if $fit == 'medium' {
      @include mds-apply-font('text', 'small', 'normal');
    }
    @if $fit == 'large' {
      @include mds-apply-font('text', 'medium', 'normal');
    }
    @if $fit == 'x-large' {
      @include mds-apply-font('text', 'large', 'normal');
    }
  }

  @if $orientation== 'horizontal' {
    .item {
      align-items: center;
      flex-direction: column;
      gap: var(--mds_core_step-indicator-item_#{$fit}_horizontal_gap);
      width: var(--mds_core_step-indicator-item_#{$fit}_marker_width);

      .label {
        justify-content: center;
        text-align: center;
      }

      &::after {
        height: var(--mds_core_step-indicator-item_#{$fit}_horizontal_line_height);
        left: var(--mds_core_step-indicator-item_#{$fit}_horizontal_line_left);
        right: 0;
        top: var(--mds_core_step-indicator-item_#{$fit}_horizontal_line_top);
        width: auto;
      }
    }
  } @else {
    & {
      display: flex;
      flex-direction: column;
      flex-grow: 1;
      position: relative;
    }

    ::slotted(*) {
      align-items: flex-start;
    }

    .item {
      align-items: flex-start;
      flex-direction: row;
      gap: var(--mds_core_step-indicator-item_#{$fit}_vertical_gap);
      width: auto;

      &::after {
        bottom: 0;
        height: auto;
        left: var(--mds_core_step-indicator-item_#{$fit}_vertical_line_left);
        top: var(--mds_core_step-indicator-item_#{$fit}_vertical_line_top);
        width: var(--mds_core_step-indicator-item_#{$fit}_vertical_line_width);
      }

      .label {
        align-self: stretch;
        justify-content: unset;
        text-align: unset;
      }
    }
  }
}
