{
  "timestamp": 1752222503694,
  "data": "---\ntags:\n  - core\n  - redaction\n  - sensitive information\n  - tooltip\ntitle: Truncation\ndescription: Use truncation when content exceeds the size of its container.\n---\n\nexport const urlYes = \"www.maersk.com/…/something.html\";\nexport const urlNo = \"www.maersk.com/archives/20230…\";\n\nOne way of making sure that long texts (especially those of variable length, such as localised and user generated text) don't break the design or take up too much space is to truncate (shorten) it.\n\nTo let the user know that some of the text has been hidden, the truncated characters are replaced by an ellipsis (…). Allowing the user to access the entire text string by providing a <PageLink path=\"/components/tooltip/\">tooltip</PageLink> on hover is recommended.\n\nHowever, since truncation comes with the risk of hiding useful information from the user, it is always worth considering whether wrapping (letting the text break and continue on multiple lines) is a better alternative. Truncated text strings can be especially inaccessible on touch devices where providing a <PageLink path=\"/components/tooltip/\">tooltip</PageLink> on hover is not an option.\n\n## Best Practice\n\n- Provide a <PageLink path=\"/components/tooltip/\">tooltip</PageLink> on hover that allows the user to read the entire text\n- The ellipsis should represent three or more truncated characters\n- There should be a minimum of four visible characters in a truncated text string\n- Use the ellipsis with moderation making sure its meaning is consistent throughout\n- Consider the placement of truncation based on which part of the text string is most likely to be unique and/or useful\n- Consider alternatives to truncation and choose your method with care\n- Avoid truncating text in navigation items, titles, labels, error messages, hint text and notifications\n\n## Truncation placement\n\nFor the most part text is truncated at the end, letting the user read the first part of the text. However, in some cases it is preferable to truncate in the middle or at the beginning of a text.\n\nThis decision is highly context-dependant and should be made based on which part of the text is most unique and likely to be useful for the user in the specific use case.\n\n### End placement\n\n<Grid2Cols>\n  <Example \n    indicator=\"success\"\n  >\n    <p>A.P. Moller - Maersk to acquire Acme Ltd., adding big and bulky fi...</p>\n  </Example>\n  <Example \n    indicator=\"error\"\n  >\n    <p>…ig and bulky first, middle and last mile logistics to its landside offerings</p>\n  </Example>\n</Grid2Cols>\n<div class=\"mds-text--small-normal\">A news article headline truncated at the end, because the beginning contains the most important information.</div>\n\n### Middle placement\n\nUse middle truncation when the start and the end of the text are most distinctive e.g. URLs and File Names.\n\n<Grid2Cols>\n  <Example \n    indicator=\"success\"\n  >\n    <p>{urlYes}</p>\n  </Example>\n  <Example \n    indicator=\"error\"\n  >\n    <p>{urlNo}</p>\n  </Example>\n</Grid2Cols>\n\n### Beginning placement\n\n<Grid2Cols>\n  <Example \n    indicator=\"success\"\n  >\n    <p>Card # …1718</p>\n  </Example>\n  <Example \n    indicator=\"error\"\n  >\n    <p>Card # 5471…</p>\n  </Example>\n</Grid2Cols>\n<div class=\"mds-text--small-normal\">A credit card number truncated at the beginning, because the last digits are unique to the card.</div>\n\n## Truncating file names\nIn an ideal world file names should be truncated in the middle, but since CSS only supports beginning and end truncation, at the moment, we suggest truncating at the end of the file name.\n \nWhen you truncate the end of a file name you need to make sure that the file extension (…png, …pdf etc) is not cut off by the ellipsis (…), so that it is visible at all times. This approach has been used in our <PageLink path=\"/components/file-upload/\">File Upload</PageLink> component.\n\n<Grid2Cols>\n  <Example \n    indicator=\"success\" \n    caption=\"Truncate at the end of the file name keeping the file extension\"\n  >\n    <p>this_is_a_fi…txt</p>\n  </Example>\n  <Example \n    indicator=\"success\" \n    caption=\"Truncate in the middle of the text\"\n  >\n    <p>this_is_a…ename.txt</p>\n  </Example>\n  <Example \n    indicator=\"error\" \n    caption=\"Truncate at the start\"\n  >\n    <p>…a_filename.txt</p>\n  </Example>\n  <Example \n    indicator=\"error\" \n    caption=\"Truncate the file extension\"\n  >\n    <p>this_is_a_filena…</p>\n  </Example>\n</Grid2Cols>\n\n## Other uses of truncation\n\nTruncation is typically used for text content, but also serves a purpose in other aspects of UI design.\n\n### Pagination\n\nThe pagination component uses truncation to hide the least important pages when the amount of pages exceed what is reasonable to display.\n\n<Example\n  imageSrc=\"./_images/truncation.svg\"\n/>\n\n### Redaction of sensitive information\n\nTruncation can also be used for hiding sensitive information, such as email addresses and personal identification numbers. This practice of obfuscating (parts of) informations by replacing characters with dots or asterisks is called redaction. Using truncation for this purpose comes with an additional security measure by obfuscating the amount of characters in the sensitive text string.\n\n<Grid2Cols>\n  <Example \n    indicator=\"success\"\n  >\n    <p>an…ersk.com</p>\n    <p>16...62</p>\n  </Example>\n  <Example \n    indicator=\"error\"\n  >\n    <p>annette.johansen@maersk.com</p>\n    <p>1609634862</p>\n  </Example>\n</Grid2Cols>\n<div class=\"mds-text--small-normal\">An email address and a personal identification number redacted using truncation to hide sensitive information.</div>\n\nNote that the minimum of four untruncated characters does not apply when using truncation for redaction purposes.\n\n## Drawbacks and alternatives\n\nTruncation is not the only method for dealing with overflow, and hiding information from the user can be problematic. So consider whether some of the methods below might be a better option.\n\n- **Wrapping** is the default way of handling text overflow. Simply letting the text break and continue on multiple lines is often preferable from a usability perspective since it preserves all the content that the user might find useful.\n- **Abbreviating** a text label to make it fit the allotted space is a simple but risky solution to avoid truncation. Make sure the abbreviation is widely accepted and understood among your users\n- **Fading out** the end of a text can be an elegant and efficient solution in certain cases. The main advantage of this approach is that it doesn't replace characters like the ellipsis. However the readability of the extra visible characters will be affected by diminishing contrast.\n- **Using an icon** to replace a label can be an acceptable solution in cases where the icon/action combination is highly conventional (e.g. an X to mean 'close' or a recycle bin to mean 'delete'). Read more about <PageLink path=\"/icons\">icon best pactices</PageLink>.\n\n### Loss of content control\n\nTruncating text strings (especially those with dynamic content) comes with a loss on control of exactly what is shown to the user and the risk of cutting off words in awkward places. Consider the alternatives if you are worried that your users might feel offended by some accidental profanity.\n"
}