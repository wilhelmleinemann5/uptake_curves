{
  "timestamp": 1752222493572,
  "data": "---\ntitle: Grid\ndescription: Create predictable and responsive column-based layouts across screen sizes.\ntags:\n  - responsive\n  - layout\n  - regions\n  - breakpoints\n  - content\n---\n\nimport Resources from \"../_components/Resources.astro\";\n\nThe Maersk Design System content grid provides structure and consistency across responsive layouts. It helps align components and content within the main area of a page.  It allows designers and developers to ensure clarity, predictability, and balance on any screen size.\n\nThe  grid has been designed to be responsive to our defined breakpoints and aligned with the spacing design language.\n\n<Example \n  imageSrc=\"./_images/responsive.svg\"\n  caption=\"The grid will show optimal number of columns and space between columns (gaps) based on the width of it’s parent container. \"\n  paddingCssClasses=\"py-14\"\n/>\n\n## Grid overview\n\nThe content grid adapts across parent container breakpoints with a consistent visual rhythm while scaling the number of columns to fit the available width. \n\n<div class=\"mds-table mds-table--scrollable mds-table--small mds-table--disable-row-highlight-on-hover mds-table--vertical-lines-solid\">\n  <table>\n    <thead>\n      <tr>\n        <th>Grid Columns</th>\n        <th>Container breakpoint</th>\n        <th>Width (px)</th>\n        <th>Gap (px)</th>\n        <th>Context</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>2</td>\n        <td>xs</td>\n        <td>0-640</td>\n        <td>16</td>\n        <td>Mobile layouts, stacked content.</td>\n      </tr>\n      <tr>\n        <td>6</td>\n        <td>sm</td>\n        <td>641-1024</td>\n        <td rowspan=\"4\">24</td>\n        <td>Two to three column layouts.</td>\n      </tr>\n      <tr>\n        <td rowspan=\"3\">12</td>\n        <td>md</td>\n        <td>1025-1440</td>\n        <td rowspan=\"3\">Dashboards, dense multi-column views.</td>\n      </tr>\n      <tr>\n        <td>lg</td>\n        <td>1441-1920</td>\n      </tr>\n      <tr>\n        <td>xl</td>\n        <td>1921 +</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n## Using the grid\n\nUse the grid to organise content within the main content area of the page. Avoid applying it to higher-level layout elements such as global navigation, drawers and asides or overlays. These elements often follow different layout rules and may not need to align to grid columns directly. \n\nGet started by using the Templates that have the grid applied. \n\n### Aligning to columns\n\nWhen laying out content on the grid, it is acceptable to span multiple columns. Content containers must align to the start and end of columns and not use the gaps between columns.\n\n<Example \n  imageSrc=\"./_images/aligning-to-columns-1.svg\"\n  caption=\"Content containers aligning to the start and end of columns.\"\n  paddingCssClasses=\"py-14\"\n/>\n\nAlignment is relative. Child elements do not need to align to the same grid as the parent container. For example, icon buttons within a grid-aligned toolbar don’t need to align to the same grid.\n\n<Example \n  imageSrc=\"./_images/aligning-to-columns-2.svg\"\n  caption=\"Child elements do not need to align to the same grid as the parent container.\"\n  paddingCssClasses=\"py-14\"\n/>\n\n### Containers with padding\n\nContainers with padding should align to the grid by their outer edge—not by the edge of their content. Avoid offsetting padded containers just to align inner content to the grid.\n\n<Grid2Cols>\n  <Example \n    imageSrc=\"./_images/containers-with-padding-do.svg\"\n    indicator=\"success\"\n    paddingCssClasses=\"py-14\"\n  />\n  <Example \n    imageSrc=\"./_images/containers-with-padding-dont.svg\"\n    indicator=\"error\"\n    paddingCssClasses=\"py-14\"\n  />\n</Grid2Cols>\n\n### Row spanning\n\nContent may span one or more rows to create visual groupings or accommodate flexible heights. Align vertically with care to maintain consistent spacing between content blocks.\n\n<Example \n  imageSrc=\"./_images/row-spanning.svg\"\n  paddingCssClasses=\"py-14\"\n/>\n\n### Nesting grids\n\nAvoid deeply nested grids. For simplicity, keep to a depth of 2-3 grids.\n\n## Customisation\n\nGrid columns and the space between columns (gaps) can be customised to support specific layout needs. Before customising, consider whether the same can be achieved by spanning content across columns using the default grid configuration. \n\nIt is recommended to keep to the standard grid to ensures predictable behavior and better alignment across contexts.\n\n<Example \n  imageSrc=\"./_images/customisation.svg\"\n  caption=\"Customise only cases where the default grid truly doesn’t meet the design requirements.\"\n  paddingCssClasses=\"py-14\"\n/>\n\n## Considerations\n\n- Apply the grid within the main content area, not for navigation or drawers.\n- Test how the design adapts across the different number of columns. \n- Consider hiding UI elements when number of columns is reduced. \n- Ensure that line-length is optimal when text container stretches across multiple columns.  \n- Check the screen resolutions of the Maersk Standard Devices if designing for internal products. \n\n## Resources\n\n<Resources layout={false} topbar={false} sidebar={false} treenavigation={false} breadcrumb={false} />\n\n<Notification>\nDesigners must select the corresponding grid style in Figma to match the frame width that is being used in the design. While for developers, this responsiveness is handled automatically with CSS container queries. \n</Notification>"
}