{
  "timestamp": 1752222455227,
  "data": "---\ntitle: Spacing\nnavTitle: Spacing\ndescription: Consistent spacing creates groups, rhythm and good scan-ability.\ntags:\n  - space\n  - layouts\n  - patterns\n  - 4-pixel\n---\n\n## Use 4-pixel spacing\n\nThe base unit for spacing is 4 pixels, subsequent units are multiples of 4 (such as 8, 12, 16, etc.). These units should be used consistently for all paddings, margins, gutters, typography, and layouts to ensure a cohesive appearance and user experience across all Maersk digital products.\n\n<Grid2Cols>\n  <Example \n    imageSrc=\"./_images/2-pixel-do.svg\"\n    paddingCssClasses=\"p-0\"\n    indicator=\"success\" \n    darkWarning={false}\n  />\n  <Example \n    imageSrc=\"./_images/2-pixel-dont.svg\"\n    paddingCssClasses=\"p-0\"\n    indicator=\"error\"\n    darkWarning={false}\n  />\n</Grid2Cols>\n\n\n### Exceptions to 4-pixel spacing\n\nWhen creating components, finer control is needed for spacing elements. Three acceptable exceptions here are 2, 6, and 10 pixels.\n\n<Example \n  paddingCssClasses=\"p-0\"\n  imageSrc=\"./_images/exception.svg\"\n  darkWarning={false}\n/>\n\n## Components\n\nRelate the component elements and still keep them distinct by using space units dervided from the 4-pixel base spacing. These space units will make aligning and using non-core components with core ones easier.\n\n<Grid2Cols>\n  <Example \n    paddingCssClasses=\"p-0\"\n    imageSrc=\"./_images/components-1.svg\"\n    darkWarning={false}\n  />\n   <Example \n    paddingCssClasses=\"p-0\"\n    imageSrc=\"./_images/components-2.svg\"\n    darkWarning={false}\n  />\n</Grid2Cols>\n\n## Patterns\n\nA recognisable pattern is created when consistent spacing is used to establish a visual rhythm and relationship between the pattern elements.\n\n<Example \n  paddingCssClasses=\"p-0\" \n  caption=\"Use consistent paddings and margins across patterns, especially when stacking UI elements.\" \n  imageSrc=\"./_images/patterns-1.svg\"\n  darkWarning={false}\n/>\n\nPattern spacing needs to be coherent which means not all space units need to be the same. Several spacing units can help establish better visual balance when dealing with differently-sized UI elements in the pattern.\n\n<Example \n  paddingCssClasses=\"p-0\"\n  caption=\"To create visual balance and alignment with differently sized elements use consistently different space units.\"\n  imageSrc=\"./_images/patterns-2.svg\"\n  darkWarning={false}\n/>\n\n## Layouts\nVisual hierarchy in layouts requires well spaced regions and UI elements. Spacing units can control the information density of any application layout. Use them to provide the right level for the context and users' expectation. \n\n<Example \n  paddingCssClasses=\"p-0\"\n  caption=\"Large or small spacing units have impact on the information density of any layout.\" \n  imageSrc=\"./_images/layouts.svg\"\n  darkWarning={false}\n/>\n\n## Information density\nSpace is the element that controls the information density of any interface. Adjusting the space between blocks on information creates a visual rhythm and hierarchy.\n\nHigh information density can be disorienting and overwhelming if spacing does not allow the eyes to rest and let people process what they see. People may notice the grouped elements but not process each individual item.\n\nWe recommend reading the <PageLink path=\"/design-language/component-fit/\">Fit guidelines</PageLink> to help you make an informed decision what spacing units will be most suitable for your layout composition. \n\n\n## Responsive elements\n\nEnforcing dimensions to be divisible by 4 pixels may not always be possible or desirable, for example, UI elements with dimensions that are responsive to content or viewports. What is important is ensuring 4-pixel-based spacing between sibling elements to maintain consistency and visual rhythm.\n\n<Example \n  paddingCssClasses=\"p-0\"\n  imageSrc=\"./_images/responsive.svg\" \n  darkWarning={false}\n/>"
}