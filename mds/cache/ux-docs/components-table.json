{
  "timestamp": 1752222435186,
  "data": "---\ntags:\n  - data\ntitle: Table\ndescription: >-\n  Displays data in a grid of rows and columns allowing users to scan, analyse, compare, and act upon the information within.\nrelatedPages:\n  - /guidelines/search-filter-and-sort/\n  - /components/pagination/\n---\n\nimport TableDemo from \"./_components/TableDemo.vue\";\n\n<TableDemo client:only=\"vue\" />\n\n## Best practice\n\n- Left-align text.\n- Right-align numbers and consider using <PageLink path=\"/content/numbers/monospaced-numbers/\">monospaced numbers</PageLink>.\n- Align headings with data.\n- Apply a \"less is more\" approach to selecting and structuring the data\n- Use icons, abbreviate and reduce redundancy to declutter the data\n- Prioritise columns by importance and arrange them accordingly\n- Preserve context when dealing with overflow and nested tables\n- Allow the user to sort the data by clicking the column header\n- Keep table decoration to a minimum\n\n## Implementations\n\nThe Maersk Design System offers two table options for developers:\n\n1. <MDSLink link=\"storybook\" query=\"?path=/story/components-table--documentation\">Table component</MDSLink> located in the <code>@maersk/mds-components-core</code> package. All examples on this page use this component. This supercedes the community developed web component located in the <code>@maersk/mds-components-community</code> package.<br /><br />\n2. <MDSLink link=\"storybook\" query=\"?path=/story/css-foundations-table--documentation\">CSS classes</MDSLink> for constructing your own HTML tables. These can be found in our CSS foundations package <code>@maersk/mds-foundations</code>\n\n## Headers & footers\n\nTable headers communicate what data is being presented within each column and/or row and table footers are useful when summarisation of the displayed data is needed.\n\n### Headers\n\nMost often table headers are positioned at the top row of a table. However, in some cases, it can be appropriate to 'flip' a table by using its first column to display headers. In rare cases a table may even need to have multiple headers to adequately describe the data, as in this example:\n\n<Example\n  imageSrc=\"./_images/headers.svg\"\n  caption=\"A timetable with two headers - one for weekdays (top row) and one for timeslots (first column).\"\n/>\n\n### Header tooltips \nWhen a header needs additional explanation in order to assist the user, we recommend using the <PageLink path=\"/components/tooltip/\">tooltip component</PageLink>. When a column description is provided to the MDS table component, this pattern is automatically applied. Only use tooltips when the labels might be misunderstood or consist of acronyms (e.g. INCO terms). \n\n<Example\n  imageSrc=\"./_images/header-tooltips.svg\"\n  caption=\"A table with header tooltips.\"\n/>\n\n### Header groups\n\nGroup headers can help avoid duplication of text labels in the headers and keep the overall table cleaner and easier to scan and read.\n\n<Example\n  imageSrc=\"./_images/header-groups.svg\"\n  caption=\"A table with header groups.\"\n/>\n\n### Footers\n\nThe bottom row can be used as a table footer which is especially useful when numerical data has to be summarised. The footer should clearly state that it represents a summary and be visually distinct from the other rows so that it is clear to the user that its data is different.\n\n<Example\n  imageSrc=\"./_images/footers.svg\"\n  caption=\"A table with a footer showing the sum total of all the numbers in a column.\"\n/>\n\n## Sorting and filtering\n\nThe current table component supports sorting the rows of a table based on a column of choice. The most conventional way of allowing the user to do so is to make the headers clickable and clearly display the active sorting mode with a suffix icon.\n\n<Notification>\n  We recommend you to check out the full <PageLink path=\"/guidelines/search-filter-and-sort/\">guidelines on search, filter and sorting</PageLink>.\n</Notification>\n\nThe basic table sorting modes are:\n\n1. **Default/unsorted** (↑↓)\n2. Alphabetically / numerically in **ascending order** (↑ 0-9, a-z)\n3. Alphabetically / numerically in **descending order** (↓ 9-0, z-a)\n\n<Example\n  imageSrc=\"./_images/sorting.svg\"\n  caption=\"A table with its rows sorted numerically in descending order based on the values in the last column.\"\n/>\n\n## Content\n\nTables present a concise overview of relevant data to make a decision or draw an insight. It is best to apply \"less is more\" approach to selecting and structuring the data in order to conserve space, reduce visual clutter, and avoid information overload. \n\n### Declutter the data\n\nConsider replacing repetitive data entries with conventional (commonly understood) icons, e.g. checkmarks and crosses instead of \"Yes\" and \"No\". Common units can be abbreviated and displayed in the column header instead of being repeated in every cell. Table headers should be kept as short as possible to increase clarity and avoid truncation or wrapping.\n\n<Example\n  imageSrc=\"./_images/declutter-do.svg\"\n  indicator=\"success\"\n/>\n\n<Example\n  imageSrc=\"./_images/declutter-dont.svg\"\n  indicator=\"error\"\n  caption=\"A cluttered table with too much unnecessary and redundant information.\"\n/>\n\n### Alignment\n\nThe table content can be aligned both horizontally and vertically. Applying the right alignment of the content makes it significantly easier to consume and understand the data.\n\n\n#### Horizontal alignment\n\nThe following conventional pattern significantly improves the scan-ability of tabular data and could even make vertical grid lines obsolete, which gives the table a much cleaner visual expression\n\nAs a rule of thumb:\n\n- **Left-align text** (as well as non-countable numerals such as dates and phone numbers)\n- **Right-align numbers**\n- **Align headings with data**\n\n**Center-alignment** can be appropriate in certain cases, as in the 'In service' column below where the cell content consists of icons which are of equal width.\n\n<Example\n  imageSrc=\"./_images/horizontal-alignment.svg\"\n  caption=\"A table with text left-aligned, numbers right-aligned and headings aligned with the data.\"\n/>\n\n#### Vertical alignment \n\nBy default, each cell's content is vertically aligned to the middle but can be changed to top or bottom-aligned. Which alignment to choose depends on how much variation there exists between the content of the cells and the row height.\n\n\n##### Middle-aligned (centered)\n\nUse vertical middle alignment when the content in a row only varies slightly up to 3 lines.\n\n<Example\n  imageSrc=\"./_images/middle-aligned-do.svg\"\n  indicator=\"success\"\n/>\n\n<Example\n  imageSrc=\"./_images/middle-aligned-dont.svg\"\n  indicator=\"error\"\n/>\n\n##### Top-aligned\n\nUse top alignment when the content in a row varies more than 3-4 lines.\n\n<Example\n  imageSrc=\"./_images/top-aligned-do.svg\"\n  indicator=\"success\"\n/>\n\n<Example\n  imageSrc=\"./_images/top-aligned-dont.svg\"\n  indicator=\"error\"\n/>\n\n##### Bottom-aligned\n\nIn most cases, it doesn’t make sense to align cell content vertically to the bottom. When we align to the bottom we may risk that the content is hidden away e.g. by being chopped by the browser viewport. This is especially true when we are dealing with multi-line cell content and when there is a bigger variation in the length of the content between the cells within the row.\n\n<Example\n  imageSrc=\"./_images/bottom-aligned-dont.svg\"\n  indicator=\"error\"\n/>\n\n### Colspan and rowspan\n\nSometimes you might want to merge multiple cells across rows or columns. In such cases, you use the colspan and rowspan. For example, you might need a data description that spans over multiple columns or a data label that spans multiple rows. \n\n#### Example of colspan\n\n<Example\n  imageSrc=\"./_images/colspan.svg\"\n  caption=\"Data description spanning multiple columns\"\n/>\n\n<Notification>\nUse the <a href=\"#header-groups\">Header Groups</a> in cases where you want to group multiple columns under one category.  \n</Notification>\n\n#### Example of rowspan\n\n<Example\n  imageSrc=\"./_images/rowspan.svg\"\n  caption=\"Data description spanning multiple columns\"\n/>\n\nBoth colspan and rowspan help improve table structure, readability, and presentation, making them essential for a well-formatted HTML table.\n\n\n### Missing cell content\n\nDisplay a dash (-) when a cell contains no data to let the user know that the content was loaded.\n\n<Grid2Cols>\n  <Example\n    imageSrc=\"./_images/missing-cell-content-do.svg\"\n    indicator=\"success\"\n    caption=\"A table with dashes to represent missing data points.\"\n  />\n  <Example\n    imageSrc=\"./_images/missing-cell-content-dont.svg\"\n    indicator=\"error\"\n    caption=\"A table with empty cells.\"\n  />\n</Grid2Cols>\n\n### Cell content overflow\n\nIf a cell contains too much data to be displayed in a single line the text should wrap (increasing the height of the entire row). In certain cases it may be desirable to truncate the text instead – but this comes with the risk of hiding valuable information from the user and requires implementing an alternative means for the user to access the full text string (e.g. a <PageLink path=\"/components/tooltip\">tooltip</PageLink>). Read more in the <PageLink path=\"/content/truncation\">truncation guidelines</PageLink>.\n\n\n## Large data sets\n\nTables with large set of data can be difficult to display in the available screen space.\n\nThe main risk of showing tables with overflow (due to data abundance and/or screen size) is that the user loses their overview. One way of mitigating this problem is to make the header row and/or first column sticky, thus allowing the user to view the context of the data anywhere in the table.\n\n### Horizontal scroll\n\nWhen the table columns can not fit in the available screen space, allow the user to scroll horizontally to see the excess columns. It is simple, scalable and conventional solution. When the table has too many columns all potential solutions to handle them have drawbacks.\n\n<Grid2Cols>\n  <Example\n    imageSrc=\"./_images/horizontal-scroll-1.svg\"\n    caption=\"Allow the user to scroll sideways to see additional columns of a wide table on a small screen.\"\n  />\n  <Example\n    imageSrc=\"./_images/horizontal-scroll-1.svg\"\n    caption=\"Making a column sticky is a way to preserve context when the user is scrolling sideways to reveal more columns on a small screen\"\n  />\n</Grid2Cols>\n\n### Importance first\n\nArrange columns in order of importance, typically left to right. This will allow the user to quickly scan and compare the most important attributes of the data entries. This is especially valuable on narrow screens where the right-most columns will be hidden from the view port.\n\nAn exception to this rule of thumb is when two or more columns of unequal importance has a tight logical connection, e.g. ‘departure time’ and ‘arrival time’.\n\n### Combine columns to conserve space\n\nTo save horizontal space some columns with closely related data can be combined by adding the second attribute as a subtext below the first.\n\n<Grid2Cols>\n  <Example\n    imageSrc=\"./_images/combine-columns-do.svg\"\n    caption=\"Two columns with data relating to location have been combined to conserve horizontal space.\"\n  />\n  <Example\n    imageSrc=\"./_images/combine-columns-caution.svg\"\n    caption=\"Two columns with closely related data are displayed separately.\"\n  />\n</Grid2Cols>\n\n<Notification>\nConsider the context and what the user will need in it. Combining columns conserves space but at the same time can reduce the user ability to scan and compare the table data.\n</Notification>\n\n## Expandable rows\n\nUse expandable rows to add and display simple supplementary information to a table row.\n\n#### Best practice\n\n- Use to display supplementary information under a table row.\n- Expanded content should be organised and easy to read and scan.\n- Use headings, bullet points, or tables to present the information in a structured way.\n- Use a side panel or <PageLink path=\"/components/modal\">modal</PageLink> in cases where the content takes up a lot of space.\n- Maintain context by allowing the user to see the original row and its contents\n- Keep row expansion to 1 level - further levels will increase the chances of information overload.\n\nExpandable rows are ideal to show details about aggregated numbers and how they are derived when the user wants to drill deeper into the information.\n\n<Example\n  imageSrc=\"./_images/expandable-rows-1.svg\"\n  caption=\"Using expandable rows to show aggregated numbers and keeping the data well arranged for easy scanability.\" \n/>\n\nExpandable rows are suitable for displaying simple and well-grouped lists so it does not overload the interface and cause information overload for the user.\n\n<Example\n  imageSrc=\"./_images/expandable-rows-2.svg\"\n  caption=\"Using expandable rows to show aggregated numbers and keeping the data well arranged for easy scanability.\"\n/>\n\n#### Complex supplementary information\n\nWhen the supplementary information to a table row requires complex interactions or is large in volume it is better to consider using alternative patterns to disclose it. For example, a side panel or a <PageLink path=\"/components/modal\">modal</PageLink> to view and interact with the information are good alternatives. It will help shift the user focus from the table content to the complex supplementary information when it is required. This will help reduce cognitive load while maintaining the context.\n\n#### Expanding multiple rows at the same time\n\nConsider how large is the content of each expanded row and if it takes up more than 50% of the available screen space. If that’s the case, avoiding using batch expansion as a pattern. Consider opting for a modal or aside panel to disclose the supplementary information.\n\n## Pagination​\n\nWhen there are too many rows for the user to get an overview of on a single page, split the rows up into pages and allow the user to navigate between them with a <PageLink path=\"/components/pagination\">pagination</PageLink> control. Be aware that there are <PageLink path=\"/components/pagination#pagination-alternatives\">alternative ways</PageLink> of splitting rows into consumable chunks and if you are dealing with a substantial amount of rows (i.e. more than 200) a more advanced pagination control might be necessary. Depending on the context, the pagination can be placed above, below or both above and below the table.\n\n<Example\n  imageSrc=\"./_images/pagination.svg\"\n  caption=\"A table linked with the pagination component.\"\n/>\n\n## States\n\nWhen showing different states of the table it is recommended to keep the table headers visible so the user knows what data is expected to be loaded in the context. \n\n### Empty state\nConsider using an empty state when the table needs to be populated either manually or by an external source (e.g. file import). \n\n<Example\n  imageSrc=\"./_images/empty-state.svg\"\n/>\n\n### Loading\nWhen data takes more than 1 second to load show a loading state for the table to let the user know content is being loaded. The more accurate information about the loading and progress you can display the better.\n\n<Example\n  imageSrc=\"./_images/loading.svg\"\n/>\n\n### No results state\nWhen data is not available either due to too narrow search and filtering criteria or another reason, make sure to communicate the reason and provide a way for the user to recover from the dead end. \n\n<Example\n  imageSrc=\"./_images/no-results-state.svg\"\n/>\n\n### Error and Warning state\nIn cases where there is an API problem or data can’t be loaded from the server, it should be clearly communicated via the <PageLink path=\"/components/notification/\">Notification component</PageLink> that can be shown instead of the table rows. \n\n<Example\n  imageSrc=\"./_images/error-and-warning-state.svg\"\n/>\n\n## Styling options\n\nVisual dividers and other forms of table decoration should be kept at a minimum in order to make the table less busy and easier to digest.\n\n### Grid lines\n\n**Horizontal** grid lines visually separate the rows from each other and help the user scan along a row from start to finish. These are the most basic form of table decoration and should be applied by default since they serve as useful guides for reading the table.\n\n**Vertical** grid lines visually separate the columns from each other and help the user compare the same data across multiple rows. However, for the most part these are not necessary if the data is <PageLink path=\"/components/table/#cell-content-alignment\">strictly aligned</PageLink>, because the alignment itself serves as a visual separation. Whereas avoiding a spreadsheet-like expression is desirable for basic data tables it is conventional and serves a purpose for large/advanced data grids.\n\n<Example\n  imageSrc=\"./_images/gridlines-do.svg\"\n  indicator=\"success\"\n  caption=\"A table with horizontal lines only.\"\n/>\n\n<Example\n  imageSrc=\"./_images/gridlines-warning.svg\"\n  indicator=\"warning\"\n  caption=\"A table with horizontal and vertical lines.\"\n/>\n\n### Row highlight on hover\n\nAnother way of distinguishing rows from one another is to highlight a single one with a slightly different background colour when it is hovered by the user’s mouse cursor. This way the user gets to focus in on a single row of interest at a time without being overwhelmed by other elements of table decoration. This approach comes without the risk of table clutter but is unfortunately not useful on touch devices.\n\n<Example\n  imageSrc=\"./_images/row-highlight-on-hover.svg\"\n  caption=\"A table with row highlight on hover.\"\n/>\n\n### Zebra stripes\n\nIf a table is exceptionally wide it can be useful to allow the user to distinguish between rows be giving every other row a slightly different background colour. However, this adds to the visual clutter and might cause contrast issues or visually collide with other elements of the table. So before applying this style to a table, consider the alternatives for row distinction (e.g. horizontal grid lines, row highlight on hover) and carefully weigh the pro against the cons.\n\n<Example\n  imageSrc=\"./_images/zebra-stripes.svg\"\n  caption=\"'Zebra stripes' can improve the scannability of wide tables.\"\n/>\n\n## Accessibility\n\n### Best practices\n\n- Include a header\n- Use a simple table structure\n- Provide a caption (or alt text) for the table\n- Avoid empty cells\n- Avoid using tables for layout purposes\n- If the table contains (many) interactive elements use a grid instead\n\nRead more about the criteria for accessibility in the <PageLink path=\"/guidelines/accessibility/\">accessibility guidelines</PageLink>.\n\n### Use a grid for interactive elements\n\nThe cells of a basic table are not focusable or selectable so the table is not included in the tabular sequence of the page unless it has sorting controls in the header.\n\nIf a basic table contains (many) interactive elements (e.g. if each row has a checkbox for selection) the experience of tabbing through the page via keyboard or screenreader will become repetitive and cumbersome. In that case it is preferable to use a grid, since that allows the user to navigate between cells using the arrow keys."
}